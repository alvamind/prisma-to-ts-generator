--- prisma-to-ts-generator/src/ts-generator.ts
+++ prisma-to-ts-generator/src/ts-generator.ts
@@ -72,14 +72,11 @@
     let helperImports = '';
     const needsDecimal = model.fields.some(f => f.type === 'Decimal');
     const needsJson = model.fields.some(f => f.type === 'Json');
     const autoGeneratedFields = ['id', 'createdAt', 'updatedAt'];
     let importStatements = '';
 
     if (multiFiles) {
         const importStatementsArray = Array.from(imports).map(originalImportPath => {
-            const [typeDir, importName] = originalImportPath.split('/');
-            const targetDirPath = path.join(resolvedOutputPath, typeDir);
-            const targetFilePath = path.join(targetDirPath, `${importName}.ts`);
-            const modelFileDir = path.dirname(modelFilePath);
-            const absoluteModelFileDir = path.resolve(modelFileDir);
-            const absoluteTargetFilePath = path.resolve(targetFilePath);
-            let relativePath = path.relative(absoluteModelFileDir, absoluteTargetFilePath)
-                .replace(/\\/g, '/')
-                .replace(/\.ts$/, ''); // Remove .ts extension
-            if (!relativePath.startsWith('.')) {
-                relativePath = `./${relativePath}`;
+            const [typeDir, importName] = originalImportPath.split('/');
+            let relativePath;
+            if (typeDir === 'enum') {
+                relativePath = `../enum/${importName}`;
+            } else if (typeDir === 'model') {
+                relativePath = `./${importName}`;
+            } else {
+                relativePath = `./${importName}`; // default case, though unlikely
             }
             return `import type { ${importName} } from '${relativePath}';`;
         });